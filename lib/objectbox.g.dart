// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/FavoCocktail.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 6278702147929244059),
      name: 'FavoCocktail',
      lastPropertyId: const IdUid(12, 5659086485736287884),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1233369493998187560),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7732725921668307393),
            name: 'cockName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5452146634112032238),
            name: 'cockEng',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1253163115172292977),
            name: 'cockBase',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5324107409889602791),
            name: 'cockAlchol',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3947903744252343530),
            name: 'cockDesc',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4157223011433202088),
            name: 'cockTaste',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7375654059421538081),
            name: 'cockStyle',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3276429789356015322),
            name: 'cockDigest',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 685332017639020038),
            name: 'listS',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 5659086485736287884),
            name: 'color',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 6278702147929244059),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [7374548566631287907],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    FavoCocktail: EntityDefinition<FavoCocktail>(
        model: _entities[0],
        toOneRelations: (FavoCocktail object) => [],
        toManyRelations: (FavoCocktail object) => {},
        getId: (FavoCocktail object) => object.id,
        setId: (FavoCocktail object, int id) {
          object.id = id;
        },
        objectToFB: (FavoCocktail object, fb.Builder fbb) {
          final cockNameOffset = fbb.writeString(object.cockName);
          final cockEngOffset = fbb.writeString(object.cockEng);
          final cockBaseOffset = object.cockBase == null
              ? null
              : fbb.writeString(object.cockBase!);
          final cockAlcholOffset = fbb.writeString(object.cockAlchol);
          final cockDescOffset = fbb.writeString(object.cockDesc);
          final cockTasteOffset = fbb.writeString(object.cockTaste);
          final cockStyleOffset = fbb.writeString(object.cockStyle);
          final cockDigestOffset = fbb.writeString(object.cockDigest);
          final listSOffset = fbb.writeList(
              object.listS.map(fbb.writeString).toList(growable: false));
          final colorOffset = fbb.writeString(object.color);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, cockNameOffset);
          fbb.addOffset(2, cockEngOffset);
          fbb.addOffset(3, cockBaseOffset);
          fbb.addOffset(4, cockAlcholOffset);
          fbb.addOffset(5, cockDescOffset);
          fbb.addOffset(6, cockTasteOffset);
          fbb.addOffset(7, cockStyleOffset);
          fbb.addOffset(8, cockDigestOffset);
          fbb.addOffset(10, listSOffset);
          fbb.addOffset(11, colorOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = FavoCocktail(
              cockName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              cockEng: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              cockBase: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              cockAlchol: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              cockDesc: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              cockTaste: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              cockStyle: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              cockDigest: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 20, ''),
              listS: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 24, []),
              color: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 26, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [FavoCocktail] entity fields to define ObjectBox queries.
class FavoCocktail_ {
  /// see [FavoCocktail.id]
  static final id =
      QueryIntegerProperty<FavoCocktail>(_entities[0].properties[0]);

  /// see [FavoCocktail.cockName]
  static final cockName =
      QueryStringProperty<FavoCocktail>(_entities[0].properties[1]);

  /// see [FavoCocktail.cockEng]
  static final cockEng =
      QueryStringProperty<FavoCocktail>(_entities[0].properties[2]);

  /// see [FavoCocktail.cockBase]
  static final cockBase =
      QueryStringProperty<FavoCocktail>(_entities[0].properties[3]);

  /// see [FavoCocktail.cockAlchol]
  static final cockAlchol =
      QueryStringProperty<FavoCocktail>(_entities[0].properties[4]);

  /// see [FavoCocktail.cockDesc]
  static final cockDesc =
      QueryStringProperty<FavoCocktail>(_entities[0].properties[5]);

  /// see [FavoCocktail.cockTaste]
  static final cockTaste =
      QueryStringProperty<FavoCocktail>(_entities[0].properties[6]);

  /// see [FavoCocktail.cockStyle]
  static final cockStyle =
      QueryStringProperty<FavoCocktail>(_entities[0].properties[7]);

  /// see [FavoCocktail.cockDigest]
  static final cockDigest =
      QueryStringProperty<FavoCocktail>(_entities[0].properties[8]);

  /// see [FavoCocktail.listS]
  static final listS =
      QueryStringVectorProperty<FavoCocktail>(_entities[0].properties[9]);

  /// see [FavoCocktail.color]
  static final color =
      QueryStringProperty<FavoCocktail>(_entities[0].properties[10]);
}
